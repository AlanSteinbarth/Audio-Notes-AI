name: ðŸ“¦ Auto Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  # Validate tag format
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Check if prerelease
      id: check_prerelease
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        if [[ $VERSION =~ -[a-zA-Z] ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease: $VERSION"
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release: $VERSION"
        fi

  # Run tests before release
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        pytest tests/

  # Build and publish package
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
        twine check dist/*
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Audio Notatki Enterprise v${{ needs.validate.outputs.version }}
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
        generate_release_notes: true
        files: |
          dist/*
          LICENSE
          README.md

  # Notify about release
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build]
    if: success()
    
    steps:
    - name: Send notification
      run: |
        echo "ðŸŽ‰ New release: Audio Notatki Enterprise v${{ needs.validate.outputs.version }} has been published!"
